using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using PlayFab;
using PlayFab.ClientModels;
using UnityEngine.UI;

public class LoginManager : MonoBehaviour
{
    public Player _player;
    [SerializeField] GameObject LoginCanvas;
    [SerializeField] InputField IFUserName;
    [SerializeField] InputField IFPassWord;
    [SerializeField] Text ErrorText;
    [SerializeField] Button[] Buttons;
    private Coroutine currentErrorCoroutine;

    public void StartLogin()
    {
        LoginCanvas.SetActive(true);
        IFUserName.text = string.Empty;
        IFPassWord.text = string.Empty;
        ErrorText.text = string.Empty;
    }

    //===============================
    public void AutoLogin()
    {
        _player.SUserName = "testman";
        _player.SPassWord = "testman";

        //リクエスト
        var LoginRequest = new LoginWithPlayFabRequest()
        {
            TitleId = "455AB",
            Username = _player.SUserName,
            Password = _player.SPassWord,

            InfoRequestParameters = new GetPlayerCombinedInfoRequestParams
            {
                GetPlayerProfile = true
            }
        };

        //ログイン
        PlayFabClientAPI.LoginWithPlayFab(LoginRequest, OnLoginSuccess, OnError);
    }
    //===============================

    //登録ボタンを押したとき
    public void OnClickRegisterButton()
    {
        if (OrganizedString(IFUserName.text).Length < 3 || OrganizedString(IFUserName.text).Length > 10) { ShowMessage("ユーザーネームは3~10文字にしてください", Color.red); return; }
        if (OrganizedString(IFPassWord.text).Length < 6 || OrganizedString(IFPassWord.text).Length > 15) { ShowMessage("パスワードは6~15文字にしてください", Color.red); return; }

        _player.SUserName = OrganizedString(IFUserName.text);
        _player.SPassWord = OrganizedString(IFPassWord.text);

        //リクエスト
        var RegisterRequest = new RegisterPlayFabUserRequest()
        {
            TitleId = "455AB",
            Username = _player.SUserName,
            Password = _player.SPassWord,
            RequireBothUsernameAndEmail = false
        };

        //登録
        PlayFabClientAPI.RegisterPlayFabUser(RegisterRequest, OnRegisterSuccess, OnError);
    }

    //登録完了した時
    private void OnRegisterSuccess(RegisterPlayFabUserResult result)
    {
        ShowMessage("アカウントを登録しました！",Color.green);
        //自動ログイン
        OnClickLoginButton();
    }

    //ログインボタンを押したとき
    public void OnClickLoginButton()
    {
        if (OrganizedString(IFUserName.text).Length < 3 || OrganizedString(IFUserName.text).Length > 10) { ShowMessage("ユーザーネームは3~10文字にしてください", Color.red); return; }
        if (OrganizedString(IFPassWord.text).Length < 6 || OrganizedString(IFPassWord.text).Length > 15) { ShowMessage("パスワードは6~15文字にしてください", Color.red); return; }

        _player.SUserName = OrganizedString(IFUserName.text);
        _player.SPassWord = OrganizedString(IFPassWord.text);

        //リクエスト
        var LoginRequest = new LoginWithPlayFabRequest()
        {
            TitleId = "455AB",
            Username = _player.SUserName,
            Password = _player.SPassWord,

            InfoRequestParameters = new GetPlayerCombinedInfoRequestParams
            {
                GetPlayerProfile = true
            }
        };

        //ログイン
        PlayFabClientAPI.LoginWithPlayFab(LoginRequest, OnLoginSuccess, OnError);
    }

    //ディスプレイネームを設定
    private IEnumerator SetDisplayName()
    {
        yield return new WaitForSeconds(1);

        PlayFabClientAPI.UpdateUserTitleDisplayName(new UpdateUserTitleDisplayNameRequest
        {
            DisplayName = _player.SUserName
        }, result =>
        {
            _player.SDisplayName = result.DisplayName;
            Debug.Log($"ニックネームは:{_player.SDisplayName}");

            //プロセス終了
            EndLogin();

        }, error => OnError(error)) ;
    }

    //ログイン完了した時
    private void OnLoginSuccess(LoginResult result)
    {
        ShowMessage("ログイン成功しました！", Color.green);
        //DisplayNameを設定
        StartCoroutine(SetDisplayName());
    }

    //ログイン終了
    private void EndLogin()
    {
        LoginCanvas.SetActive(false);
        //ログイン終了時の処理を呼び出す
        GameManager.Instance.OnLoginEnd();
    }

    //エラー===================================================================================
    private void OnError(PlayFabError error)
    {
        _player.SUserName = null;
        _player.SPassWord = null;
        Debug.Log(error.GenerateErrorReport());

        if (error.Error == PlayFabErrorCode.UsernameNotAvailable)
        {
            ShowMessage("このユーザーネームは既に使われています", Color.red);
        }
        if (error.Error == PlayFabErrorCode.AccountNotFound)
        {
            ShowMessage("アカウントが見つかりません", Color.red);
        }
        if (error.Error == PlayFabErrorCode.InvalidUsernameOrPassword)
        {
            ShowMessage("ユーザーネームまたはパスワードが間違っています", Color.red);
        }
        if(error.Error == PlayFabErrorCode.APIClientRequestRateLimitExceeded)
        {
            ShowMessage("しばらく時間をおいてください", Color.red);
        }
    }

    private void ShowMessage(string message, Color color)
    {
        if (currentErrorCoroutine != null)
        {
            StopCoroutine(currentErrorCoroutine);
        }
        currentErrorCoroutine = StartCoroutine(MessageUIProcess(message, color));
    }

    private IEnumerator MessageUIProcess(string m, Color c)
    {
        for (int i = 0; i < Buttons.Length; i++) 
        {
            Buttons[i].interactable = false;
        }
        ErrorText.color = c;
        ErrorText.text = m;

        yield return new WaitForSeconds(2);

        ErrorText.text = string.Empty;
        for (int i = 0; i < Buttons.Length; i++)
        {
            Buttons[i].interactable = true;
        }
    }

    //=======================================================================================

    private string OrganizedString(string str)
    {
        return str.Replace("\r", "").Replace("\n", "").Trim();
    }
}
